# ESPHome config for a testing board used to ensure MahtanarM boards are functioning before shipping.

esphome:
  name: tester-mahtanarm
  friendly_name: Tester MahtanarM

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Disable logging because we're
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "TCpgEjrIp4drdIibIOIJ86ccSZiWLQOpcKTQ3Q8D5uE="

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

# Status light
light:
  - platform: neopixelbus
    id: status_led
    variant: ws2812
    num_leds: 1
    pin: 8
    internal: True
    default_transition_length: 0s

interval:
  # Update status light based which packets were received successfully
  - interval: 200ms
    then:
      - lambda: |-
          switch((int)id(comm_status).state) {
            case 0:
              id(status_led).turn_off().perform();
              break;
            case 1:
              id(status_led).turn_on().set_rgb(1,0.6,0).set_brightness(0.2).perform();
              break;
            case 2:
              id(status_led).turn_on().set_rgb(1,1,0).set_brightness(0.2).perform();
              break;
            case 3:
              id(status_led).turn_on().set_rgb(0,1,0).set_brightness(0.2).perform();
              break;
          }
  # Send a custom test-ping packet every two seconds if we've received a 'hello' from a board.
  # This packet doesn't match any known Mitsubishi packets and should be forwarded back to the test
  # board.
  - interval: 2s
    then:
      - lambda: |-
          if (id(comm_status).state > 0){
            std::vector<uint8_t> testping{0xFC,0xAA,0x01,0x30,0x02,0x54,0x42,0x8D};
            id(tstat_uart).write_array(&testping[0],8);
          }
          

sensor:
  - platform: template
    id: comm_status
    filters: 
      - timeout: 
          timeout: 5s
          value: 0


uart:
  - id: hp_uart
    baud_rate: 2400
    parity: EVEN
    rx_pin:
      number: GPIO7
    tx_pin:
      number: GPIO6
    debug:
      direction: BOTH
      dummy_receiver: true
      sequence:
        - lambda: |-
            std::vector<uint8_t> conreq{0xFC,0x5A,0x01,0x30,0x02,0xCA,0x01,0xA8};
            std::vector<uint8_t> testping{0xFC,0xAA,0x01,0x30,0x02,0x54,0x42,0x8D};
            std::vector<uint8_t> testpong{0xFC,0xAB,0x01,0x30,0x02,0x54,0x42,0x8C};
            UARTDebug::log_hex(direction, bytes, ' ');
            if (direction == uart::UART_DIRECTION_RX && conreq == bytes) {
              // We received a 'hello' from the board under test
              if (!id(comm_status).has_state() || id(comm_status).state <= 1) {id(comm_status).publish_state(1);}
            } else if (direction == uart::UART_DIRECTION_RX && testping == bytes) {
              // We received our custom ping packet!
              if (id(comm_status).state <= 2) {id(comm_status).publish_state(2);}
              id(hp_uart).write_array(&testpong[0],8); // Send a response
            }
  - id: tstat_uart
    baud_rate: 2400
    parity: EVEN
    rx_pin:
      number: GPIO5
    tx_pin:
      number: GPIO20
    debug:
      direction: BOTH
      dummy_receiver: true
      sequence:
        - lambda: |-
            std::vector<uint8_t> testpong{0xFC,0xAB,0x01,0x30,0x02,0x54,0x42,0x8C};
            UARTDebug::log_hex(direction, bytes, ' ');
            if (direction == uart::UART_DIRECTION_RX && testpong == bytes) {
              // We received the response from our ping packet!
              if (id(comm_status).state <= 3) {id(comm_status).publish_state(3);}
            }